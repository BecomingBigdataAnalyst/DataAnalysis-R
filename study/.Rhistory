seq(0,1,by=0.001)  #두 명령어 간의 차이점은 무엇인가?
seq(0,1,length.out=1000)
rep(1:10,each=3)
rep(1:10, times=3)
length(m)
#비교연산자 : <, >, !=, ==
ex<-c(1,3,5,7,9, NA) #데이터에 값이 존재하지 않을 경우 NA로 설치
ans <-ex<5 #연산자는 벡터의 각 원소간 연산을 지원
print(ans)
ex<10
ex[ex<10]
ex[ex %% 2 == 0]
ex[is.na(ex)]
ex[ex %% 2 == 0 & !is.na(ex)]
#산술연산자: +_*/%
ex -5
ex %% 5  #나머지 연산
ex %/% 5 #정수 나누기 (나머지 버림)
#논리연산자 : & , |, ! , && , ||
c(T,F) & c(F,T)  #벡터의 각 원소간 연산 처리
c(T,F) && c(F,T) #단일 논리값을 계산 (단축식 평가 지원)
ex[0] #벡터의 위치값은 0이 아닌 1부터 시작한다
is.na(ex[6]) #요소가 NA인지 검사
x<-NULL #변수를 선언할 뿐 초기화하지 않는 경우 NULL 사용
is.null(x)
is.null(1)
is.null(NA)
# matrix: 벡터의 2차원 배열 - 동일한 유형의 원소들로 구성
# 1행은 숫자, 2행은 문자 같은 구성 불가
# matrix(벡터,nrow=숫자, ncol=숫자)
a <-matrix(c(1,2,3,4,5,6,7,8,9), nrow=3)
b <-matrix(c(1,2,3,4,5,6,7,8,9), ncol=3)
a
b
a <-matrix(c(1,2,3,4,5,6,7,8,9), nrow=9)
b <-matrix(c(1,2,3,4,5,6,7,8,9), ncol=9)
a
b
c<-matrix(1:20, nrow=5, ncol=4)
c
cells <-c(1,35,67,99)
rnames <-c('r1','r2')
cnames <-c('c1','c2')
cells
rnames
cnames
d<-matrix(cells,nrow=2, ncol=2, byrow=T, #byrow=true 행우선
dimnames=list(rnames, cnames))
d
d<-matrix(cells,nrow=2, ncol=2, byrow=F, #byrow=false 열 우선
dimnames=list(rnames, cnames))
d
#행렬의 각 요소는 '행렬이름[행,열]'로 접근 가능
#imnames()으로 행과 이름에 이름을 부여했다면 그 이름을 접근 가능
d["r1",] #1행만 출력
d[,'c2'] #2열만 출력
d[1,]
d[,2]
d[2,2]  #2행2열 출력
dim(d)  #행렬의 차원을 출력
ncol(d) #행렬의 열 기준 차원 출력
nrow(d) #행렬의 행 기준 차원 출력
solve(d) #역행렬
t(d) #전치행렬
# array : n차원 행렬
# array(벡터,차원,행렬이름)
#(2 x 3 x 4) 3차원 행렬 생성
dim1<-c("A1","A2")
dim2<-c("B1","B2","B3")
dim3<-c("C1","C2","C3","C4")
z<-array(1:24, c(2,3,4), dimnames=list(dim1,dim2,dim3))
z[1,1,1]
z[1,2,3]
z[,,3]
dim(z)
#데이터 프레임 dataframe : 열마다 서로 다른 유형을 가질 수 있는 자료 구조
#다양한 변수, 관측치, 범주(펙터)를 표현하기 위한 자료구조
#data, frame(열1 열2 열3)
x<-c(1,2,3,4,5)              #첫번째 열 정의
y<-c('a','b','c','d','e')   #두번째 열 정의
z<-c(T,F,T,T,T)             #세번째 열 정의
s<-data.frame(x,y,z)
str(s)    #작업공간에 생성된 객체의 구조 확인
s$x       #'데이터프레임이름$열이름' 형식으로 접근 가능
s[1,]     # 컬럼의 차원이 1이 되면 벡터 값으로 자동 변환
s[,c('x','y')]
s[,c('x')]
s[,c('x'), drop=F] #자동으로 벡터로 변하는 것을 방지 하려면 drop=F 사용
x<-data.frame(x=1:1000)
head(x)  #데이터의 앞부분을 살펴봄
tail(x)  #데이터의 뒤부분을 살펴봄
Age(mo.)<-c(01,03,05,02,11)
Weight(kg.)<-c(4.4,5.3,7.2,5.2,8.5)
Age(mo.)<-c(09,03,09,12,03)
Weight(kg.)<-c(7.3,6.0,10.4,10.2,6.1)
#환자정보
PatientId <-c(1,2,3,4)
AdmDate <-c('10/15/2014','11/01/2014','10/21/2014','10/28/2014')
Age <-c(25,34,28,52)
Diabetes <-c('Type1','Type2','Type1','Type1')
Status<-c('Poor','Improved','Excellent','Poor')
patientdata <-data.frame(PatientId,AdmDate,Age,Diabetes,Status)
patientdata #환자정보 출력
str(patientdata) #데이터 객체의 구조를 출력
patientdata[1:2] #1,2속성 출력
patientdata[c('Diabetes','Status')] #속성명으로 출력
patientdata$Age #객체명에 $를 사용해서 속성명을 다룰 수 있음
patientdata$PatientId
patientdata$Diabetes
patientdata$Status
#위 사례처럼 모든 변수앞에 patientdata$를 사용해서
#특정 속성을 출력하는 것은 불편
#attach(), detach(), with() 사용해서 해결 가능
#attach : 특정 데이터프레임 명을 검색경로에 추가
#detach : 특정 데이터프레임 명을 검색경로에 제거
attach(patientdata)
PatientId
Age
Diabetes
Status
AdmDate
detach(patientdata)
#with(객체명, {속성명})
with(patientdata,{Age})
with(patientdata, {
print(Age)
print(Status)
})
#list - 하나의 이름 아래 다양한 객체들을 모아놓은 것
#키, 값 형태로 데이터를 담아 두는 연관 배열의 일종
#list(이름1=객체1, 이름2=객체2, 이름3=객체3, ...)
sj1 <- list(name ='혜교', kor=99 ,eng=98 ,mat=87)
#단일값으로 list를 구성
sj1
sj1[1]
sj1[[1]]
sj1['name']
sj1[['name']]
sja1 <- list(name ='혜교',kem=c(99,98,87))
#벡터를 list원소로 사용
sja1
#혜교의 영어점수 출력
sja1[['kem']] #sja1[[2]]
sja1[['kem']][2]
mixed <-list(a=sj1, b=sja1)
#리스트 자신을 리스트의 원소로 구성
mixed
#혜교의 영어점수 출력
mixed[['b']]
mixed[['b']][['kem']]
mixed[['b']][['kem']][2]
#sample R scripts 3
g<-"My First List"
h<-c(25,26,18,39)
j<-matrix(1:10, nrow=5)
k<-c("one","two","three")
mylist<-list(title=g, ages=h,j,k)
mylist
mylist[[2]]
mylist[["ages"]]
mylist[2]
mylist$ages
#sample R scripts 3
mtcars  #자동차 관련 데이터 집합
?mtcars
help(mtcars)
#mpg(연료소비율)에 대한 기본통계정보 summary출력
#summary(mpg) #잘못된 표기법
summary(mtcars$mpg)
plot(mtcars$mpg, mtcars$disp) #연료소비율과 배기량의 관계
plot(mtcars$mpg,mtcars$wt) #연료소비율과 차량무게의 관계
#detach : 특정 데이터프레임 명을 검색경로에 제거
attach(mtcars)
summary(mpg)
plot(mpg,disp)
plot(mpg,wt)
detach(mtcars)
#with(객체명, {속성명})
with(mtcars, {
summary(mpg)
plot(mpg,disp)
plot(mpg,wt)
})
#팩터 - 벡터자료구조에 추가정보가 더해진 것
#카테고리 자료형을 만들어 데이터에 의미를 부여하고 할때 사용
a <- 1:3
a
factor(a,levels=c(1,3,5)) #1,3만 카테고리에 포함되서 2의 자리에 NA가 뜬다
factor(a,levels=c(1,3,5), labels=c("일","삼","오"))
#설문지 답변을 factor로 정의
#1: 아주 안좋음 2:나쁘지 않음 3:보통 4:그럭저럭 좋음 5: 너무 좋음
#이건 내가 푼것
mgr1_q<-c(5,4,5,5,5)
mgr2_q<-c(3,5,2,5,5)
mgr3_q<-c(3,5,5,5,2)
mgr4_q<-c(3,3,4)
mgr5_q<-c(2,2,1,2,1)
manager<-c(1,2,3,4,5)
date<-c('10/24/14','10/28/14','10/01/14','10/12/14','05/01/14')
country<-c('US','US','UK','UK','UK')
gender<-c('M','F','F','M','F')
age<-c(32,45,25,39,99)
q1<-c(5,3,3,3,2)
q2<-c(4,5,5,3,2)
q3<-c(5,2,5,4,1)
q4<-c(5,5,5,NA,2)
q5<-c(5,5,2,NA,1)
leadership<-data.frame(manager,date,country,gender,age,q1,q2,q3,q4,q5)
leadership
#선생님의 풀이
mgr1_q<-c(5,4,5,5,5)
levels_q<-c(1,2,3,4,5)
labels_q<-c('아주 안좋음','나쁘지 않음','보통','그럭저럭 좋음','아주 좋음')
factor(mgr1_q, levels=levels_q, labels=labels_q)
#graph1
#숫자와 텍스트만으로 작성된 통계결과는 지루/따분
#그래프와 그림형태로 제시 (시각적 묘사) - 열정적 반응
#그래프 그리기 함수 :plot(x,y), plot(y~x)
x<-(1:10)
y<-(10:1)
plot(x,y) #권장!
#plot(y~x) #데카르트 방식
x<-c(-5:5)
y<-3*x+5
plot(x,y)
x<-(1:100)
y<-sqrt(x)
plot(x,y)
x<-(1:100)
y<-log(2*x)
plot(x,y)
plot(rnorm(15))     #산점도
boxplot(rnorm(15))  #히스토그램
boxplot(rnorm(15))  #상자수염
#그래프 출력방향 지정 - sink()
install.packages('ggplot2')
library(ggplot2)
bmp('c:/JAVA/graph.bmp')  #그래프를 bmp방식으로 저장
attach(mtcars)
plot(wt, mpg) #x축 중량, y축 연비 /산점도
abline(lm(mpg~wt)) #상관관계를 의미하는 직선 추가
title('차량중량에 따른 연비 상관관계')
detach(mtcars)
sink()            #작성한 내용을 지정한 장치로 전달
dev.off()         #sink 해제
#그래프 그리기 사례
#두 약물에 따른 환자반응
dose<-c(20,30,40,45,60)
drugA <- c(16,20,27,40,60)
drugB <- c(15,18,25,31,40)
plot(dose,drugA)
plot(dose,drugA, type='p')  #점
plot(dose,drugA, type='l')  #선
plot(dose,drugA, type='h')  #수직선
plot(dose,drugA, type='s')  #계단식
plot(dose,drugA, type='S')  #계단식
#그래프 옵션 설정 - par()
#pch : 점 종류 (0~25)
#lty:선 종류(1~6)
#cex:기호 크기 1, 1.5, 0.5
#lwd:선 굵기 1, 1.5, 0.5
par(lty=2,pch=10) #선 유형, 점 유형,
plot(dose,drugB)
plot(dose,drugB, type='b')
plot(dose,drugB, type='b',lty=4,pch=5)
par(bg='light cyan')  #그래프 배경
plot(dose,drugB,type='b')
plot(dose,drugA, col='red', col.axis='blue', col.lab='green',
main='메인제목', col.main='purple',
sub='서브제목', col.sub='navy', fg='orange',type='b')
#b는 both를 의미한다
#그래프에서 사용가능한 색상 조회 - colors()
colors()
#하지만, 자주 사용하는, 인기있는 색상은 따로 있음
color1 <-rainbow(7)        #무지개 색
color2 <-heat.colors(10)
color3 <-topo.colors(10)
color4 <-cm.colors(10)
color5 <-gray(0:10/10)
plot(1:10,10:1,col=color1)
plot(1:10,10:1,col=color2)
plot(1:10,10:1,col=color3)
plot(1:10,10:1,col=color4)
plot(1:10,10:1,col=color5)
#iris에서 종별로 색상을 지정해서 산점도 출력
plot(Petal.Width~Sepal.Width,
iris, xlab='Sepal 길이',
ylab='Petal 너비', main='iris 샘플링',
col=c('red','blue','green')[Species])
#원 그래프 (파이그래프)
pie(rep(1:10), labels=color1,col=color1)
pie(rep(1:10), labels=color2,col=color2)
pie(rep(1:10), labels=color3,col=color3)
pie(rep(1:10), labels=color4,col=color4)
pie(rep(1:10), labels=color5,col=color5)
#글씨체 변경 - windowsFonts
windowsFonts(
A = windowsFont("궁서체"),
B = windowsFont("Consolas"),
C = windowsFont("맑은 고딕")
)
#폰트 : 1 기본, 2 진하게 3 이탤릭 4 진하고 이탤릭
par(mfrow=c(1,1)) #그래프 옵션 초기화
par(font.lab=3, font.main=4,
font.axis=2, family='A')
plot(dose,drugA, type='b',main='폰트 연습')
par(font.lab=3, font.main=4,
font.axis=2, family='B')
plot(dose,drugA, type='b',main='폰트 연습')
par(font.lab=3, font.main=4,
font.axis=2, family='C')
plot(dose,drugA, type='b',main='폰트 연습')
#범례 - legend(위치, 제목, 범례, ...)
install.packages('Hmisc')  #그래프에 작은 눈금을 그림
library(Hmisc)
minor.tick(nx=3, ny=3, tick.ratio=0.5)
par(mfrow=c(1,1))
plot(dose,drugA, type='b',
pch=15, lty=1, col='red', ylim=c(0,60),
main='환자와 약물A의 관계', xlab='환자',
ylab='약물 반응')
lines(dose, drugB, type='b', pch=17, lty=2, col='blue')
#2번째 그래프 작성
abline(h=c(30), lwd=1.5, lty=2, col='gray') #보조선
legend('topleft',inset=.05, title='약물종류',
c('A','B'), lty=c(1,2), pch=c(15,17),
col=c('red','blue'))
#위치는 3x3으로 나누어진 영역을 top,center,bottom,
#left, center,right를 조합해서 지정
#한 화면에 여러개의 그래프 배치
#mfrow=c(행,열) 행중심
#mfcol=c(행,열) 열중심
#2x2 형태의 그래프 배치
par(mfrow=c(2,2))   #2x2 화면 나눔
attach(mtcars)
plot(wt, mpg, main='차량 무게 대비 연비 산점도')
plot(wt, disp, main='차량 무게 대비 배기량 산점도')
hist(wt,main='차량무게 히스토그램')
boxplot(wt, main='차량무게 박스수염 그래프')
detach(mtcars)
attach(mtcars)
par(mfrow=c(3,1))
hist(wt)      #차체중량
hist(mpg)     #연비
hist(disp)    #배기량
detach(mtcars)
#1x2 형태의 그래프 배치
#layout : 영역의 갯수는 행렬을 이용
#layout(matrix(영역번호), 너비, 높이)
#layout.show: 영역을 미리 볼 수 있음
attach(mtcars)
layout(matrix(c(1,1,2,3),2,2),byrow=T)   #byrow=T 행을 우선으로 한다!
hist(wt)
hist(mpg)
hist(disp)
detach(mtcars)
#split.screen() : 화면 분할
#split.screen(c(행,열),스크린번호)
attach(mtcars)
split.screen(c(2,1))  #2행 1열로 나눔
split.screen(screen=2,c(1,2))
#2행1열 스크린을 1행2열로 나눔
screen(1) #1,1
hist(wt)
screen(3) #2,1
hist(mpg)
screen(4) #2,2
hist(disp)
detach(mtcars)
close.screen(all=T)  #화면을 원래대로
#KNN
#iris 자료를 분석하기 위해 KNN 사용 \
data(iris)
head(iris, n=10) #10개 행 출력
#iris 데이터 집합을 train, test 데이터로 나눔
set.seed(9567)
idx <- sample(nrow(iris), size = nrow(iris)*0.75)
train <- iris[idx, ]
test<- iris[-idx,]
#데이터 집합 갯수와 차원 , 빈도확인
dim(train)    #갯수, 차원
dim(test)
table(train$Species)  #빈도
table(test$Species)
#KNN 알고리즘 적용
library(class)
knn <- knn(train[,1:4], test[,1:4], train$Species, k=1, prob=T)
knn
knn1 <- knn(train[,1:4], test[,1:4], train$Species, k=1, prob=T)
knn1
knn3 <- knn(train[,1:4], test[,1:4], train$Species, k=3, prob=T)
knn3
#예측값 평가
knn1conf <- table(knn1, test$Species)
knn1conf
knn1acc <- sum(diag(knn1conf)) /nrow(test)
knn1acc
knn3conf<-table(knn3, test$Species)
knn3acc <- sum(diag(knn3conf)) / nrow(test)
knn3acc
# 공유폴더에 like, buy 파일 C:\JAVA에 옮기기
#누구와 소개팅하면 좋을까? 결혼정보 시스템 짝 이어주기
isLike <-read.csv('c:/JAVA/like.csv')
colnames(isLike) <- c('talk','book','trip','hakjum','height','skin','muscle','like')
set.seed(180315)
idx <- sample(nrow(isLike),size=nrow(isLike)*0.7)
train <- isLike[idx,]
test <- isLike[-idx,]
train
test
knn1 <- knn(train[,1:7], test[,1:7],train$like, k=1, prob=T)
knn3 <- knn(train[,1:7], test[,1:7],train$like, k=3, prob=T)
knn1
knn3
knn1conf <- table(knn1, test$like)
knn1conf
knn1acc <-sum(diag(knn1conf))/nrow(test)
knn1acc
knn3conf <- table(knn3, test$like)
knn3conf
knn3acc <-sum(diag(knn3conf))/nrow(test)
knn3acc
#누가 이상품을 구매할까? - 매장 방문고객
isBuy <- read.csv('c:/JAVA/buy.csv')
isBuy
colnames(isBuy) <- c('age','income','buy')
#표준화 작업 : 나이와 월수입 단위가 다름
isBuy$scage <- scale(isBuy$age)
isBuy$scincome <- scale(isBuy$income)
#데이터를 train/test로 나누지 않고 학습
train <-isBuy[ ,4:5]  #표준화된 데이터
test <- data.frame(age=34,income=450)
test$scage <- (test$age - mean(isBuy$age)) /sd(isBuy$age)
test$scincome <- (test$income - mean(isBuy$income)) /sd(isBuy$income)
test<-test[,3:4]
labels <- isBuy[,3]
knn1<-knn(train,test,labels, k=1,prob=T)
knn1
install.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ', 'devtools', 'uuid', 'digest'))
devtools::install_github('IRkernel/IRkernel')
install.packages(c("repr", "IRdisplay", "evaluate", "crayon", "pbdZMQ", "devtools", "uuid", "digest"))
#KNN
#iris 자료를 분석하기 위해 KNN 사용 \
data(iris)
head(iris, n=10) #10개 행 출력
#iris 데이터 집합을 train, test 데이터로 나눔
set.seed(9567)
idx <- sample(nrow(iris), size = nrow(iris)*0.75)
train <- iris[idx, ]
test<- iris[-idx,]
#데이터 집합 갯수와 차원 , 빈도확인
dim(train)    #갯수, 차원
dim(test)
table(train$Species)  #빈도
table(test$Species)
#KNN 알고리즘 적용
library(class)
knn <- knn(train[,1:4], test[,1:4], train$Species, k=1, prob=T)
knn
knn1 <- knn(train[,1:4], test[,1:4], train$Species, k=1, prob=T)
knn1
knn3 <- knn(train[,1:4], test[,1:4], train$Species, k=3, prob=T)
knn3
#예측값 평가
knn1conf <- table(knn1, test$Species)
knn1conf
knn1acc <- sum(diag(knn1conf)) /nrow(test)
knn1acc
knn3conf<-table(knn3, test$Species)
knn3acc <- sum(diag(knn3conf)) / nrow(test)
knn3acc
# 공유폴더에 like, buy 파일 C:\JAVA에 옮기기
#누구와 소개팅하면 좋을까? 결혼정보 시스템 짝 이어주기
isLike <-read.csv('c:/JAVA/like.csv')
colnames(isLike) <- c('talk','book','trip','hakjum','height','skin','muscle','like')
set.seed(180315)
idx <- sample(nrow(isLike),size=nrow(isLike)*0.7)
train <- isLike[idx,]
test <- isLike[-idx,]
train
test
knn1 <- knn(train[,1:7], test[,1:7],train$like, k=1, prob=T)
knn3 <- knn(train[,1:7], test[,1:7],train$like, k=3, prob=T)
knn1
knn3
knn1conf <- table(knn1, test$like)
knn1conf
knn1acc <-sum(diag(knn1conf))/nrow(test)
knn1acc
knn3conf <- table(knn3, test$like)
knn3conf
knn3acc <-sum(diag(knn3conf))/nrow(test)
knn3acc
#누가 이상품을 구매할까? - 매장 방문고객
isBuy <- read.csv('c:/JAVA/buy.csv')
isBuy
colnames(isBuy) <- c('age','income','buy')
#표준화 작업 : 나이와 월수입 단위가 다름
isBuy$scage <- scale(isBuy$age)
isBuy$scincome <- scale(isBuy$income)
#데이터를 train/test로 나누지 않고 학습
train <-isBuy[ ,4:5]  #표준화된 데이터
test <- data.frame(age=34,income=450)
test$scage <- (test$age - mean(isBuy$age)) /sd(isBuy$age)
test$scincome <- (test$income - mean(isBuy$income)) /sd(isBuy$income)
test<-test[,3:4]
labels <- isBuy[,3]
knn1<-knn(train,test,labels, k=1,prob=T)
knn1
install.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ', 'devtools', 'uuid', 'digest'))
devtools::install_github('IRkernel/IRkernel')
IRkernel::installspec()
